after :: hspec-core:Test.Hspec.Core.Example.ActionWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
afterAll :: GHC.Stack.Types.HasCallStack => hspec-core:Test.Hspec.Core.Example.ActionWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
afterAll_ :: GHC.Stack.Types.HasCallStack => IO () -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
after_ :: IO () -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
around :: (hspec-core:Test.Hspec.Core.Example.ActionWith a -> IO ()) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.Spec
aroundAll :: GHC.Stack.Types.HasCallStack => (hspec-core:Test.Hspec.Core.Example.ActionWith a -> IO ()) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.Spec
aroundAllWith :: GHC.Stack.Types.HasCallStack => (hspec-core:Test.Hspec.Core.Example.ActionWith a -> hspec-core:Test.Hspec.Core.Example.ActionWith b) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith b
aroundAll_ :: GHC.Stack.Types.HasCallStack => (IO () -> IO ()) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
aroundWith :: (hspec-core:Test.Hspec.Core.Example.ActionWith a -> hspec-core:Test.Hspec.Core.Example.ActionWith b) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith b
around_ :: (IO () -> IO ()) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
before :: IO a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.Spec
beforeAll :: GHC.Stack.Types.HasCallStack => IO a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.Spec
beforeAllWith :: GHC.Stack.Types.HasCallStack => (b -> IO a) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith b
beforeAll_ :: GHC.Stack.Types.HasCallStack => IO () -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
beforeWith :: (b -> IO a) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith b
before_ :: IO () -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
ignoreSubject :: hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith () -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a
mapSubject :: (b -> a) -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith a -> hspec-core:Test.Hspec.Core.Spec.Monad.SpecWith b
